export function setVmForVal (store, modelNamespace, model, formatValueToField, formatValueToModel) {
  let mContext = getModuleByNamespace(store, modelNamespace)
  let vm = new Vue({
    model: model,
    computed: {
      value: {
        get: function () {
          let value = objGet(mContext.state, model, null)
          return isFunction(formatValueToField) ? formatValueToField(value) : value
        },
        set: function (newVal) {
          mContext.dispatch({
            type: 'set',
            key: model,
            value: isFunction(formatValueToModel) ? formatValueToModel(newVal) : newVal
          })
        }
      }
    }

  })
  return vm
}

export function defineValuePropertyWithVm (obj, store, namespace, model, formatValueToField, formatValueToModel) {
  let vm = setVmForVal(store, namespace, model, formatValueToField, formatValueToModel)

  Object.defineProperty(obj, 'value', {
    enumerable: true,
    configurable: true,
    get: function valueGetter () {
      console.log(vm.$options.model, vm.value)
      return vm.value
    },
    set: function (newVal) {
      let value = vm.value
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      vm.value = newVal
    }
  })
}
